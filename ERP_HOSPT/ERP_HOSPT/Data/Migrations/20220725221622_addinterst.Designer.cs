// <auto-generated />
using ERP_HOSPT.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ERP_HOSPT.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220725221622_addinterst")]
    partial class addinterst
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ERP_HOSPT.Data.Analysis", b =>
                {
                    b.Property<int>("AnalysisId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("a_Pric");

                    b.Property<string>("a_name");

                    b.HasKey("AnalysisId");

                    b.ToTable("Analysis");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.City", b =>
                {
                    b.Property<int>("cityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("cit_name")
                        .IsRequired();

                    b.HasKey("cityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Compan_name");

                    b.Property<int>("State");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Depart", b =>
                {
                    b.Property<int>("Departno")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("dept_name");

                    b.HasKey("Departno");

                    b.ToTable("Depart");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyId");

                    b.Property<string>("Diagnosis_date");

                    b.Property<string>("Dig");

                    b.Property<string>("Drug");

                    b.Property<string>("Drug_detail");

                    b.Property<int>("PatientId");

                    b.Property<int>("PhysicianId");

                    b.Property<int>("interviewId");

                    b.HasKey("DiagnosisId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("interviewId");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Drug", b =>
                {
                    b.Property<int>("DrugId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("d_name");

                    b.Property<string>("d_pric");

                    b.HasKey("DrugId");

                    b.ToTable("Drug");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.interview", b =>
                {
                    b.Property<int>("interviewId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyId");

                    b.Property<int>("PatientId");

                    b.Property<int>("PhysicianId");

                    b.Property<bool>("State");

                    b.Property<bool>("Stateinterview");

                    b.Property<string>("inter_date");

                    b.Property<string>("inter_notes");

                    b.Property<string>("inter_type");

                    b.Property<string>("userId");

                    b.HasKey("interviewId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("userId");

                    b.ToTable("Interview");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Measure", b =>
                {
                    b.Property<int>("MeasureId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Measure_name");

                    b.HasKey("MeasureId");

                    b.ToTable("Measure");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyId");

                    b.Property<string>("Patientname")
                        .IsRequired();

                    b.Property<int>("RegionId");

                    b.Property<int>("cityId");

                    b.Property<string>("pa_addr")
                        .IsRequired();

                    b.Property<string>("pa_data")
                        .IsRequired();

                    b.Property<string>("pa_email");

                    b.Property<string>("pa_job")
                        .IsRequired();

                    b.Property<string>("pa_mobile")
                        .IsRequired();

                    b.Property<string>("pa_nat")
                        .IsRequired();

                    b.Property<string>("pa_note")
                        .IsRequired();

                    b.Property<string>("pa_phone")
                        .IsRequired();

                    b.Property<string>("pa_sex")
                        .IsRequired();

                    b.HasKey("PatientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegionId");

                    b.HasIndex("cityId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Physician", b =>
                {
                    b.Property<int>("PhysicianId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyId");

                    b.Property<int>("Departno");

                    b.Property<int>("QualifyId");

                    b.Property<int>("RegionId");

                    b.Property<int>("cityId");

                    b.Property<string>("phy_addr")
                        .IsRequired();

                    b.Property<string>("phy_birth")
                        .IsRequired();

                    b.Property<string>("phy_emil");

                    b.Property<string>("phy_name")
                        .IsRequired();

                    b.Property<string>("phy_phone");

                    b.Property<string>("phy_sex")
                        .IsRequired();

                    b.Property<string>("userId");

                    b.HasKey("PhysicianId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Departno");

                    b.HasIndex("QualifyId");

                    b.HasIndex("RegionId");

                    b.HasIndex("cityId");

                    b.HasIndex("userId");

                    b.ToTable("Physician");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Prescribtion", b =>
                {
                    b.Property<int>("PrescribtionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Dig");

                    b.Property<int>("DrugId");

                    b.Property<int>("PatientId");

                    b.Property<int>("PhysicianId");

                    b.Property<string>("Pre_date");

                    b.Property<string>("pre_detail");

                    b.HasKey("PrescribtionId");

                    b.HasIndex("DrugId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.ToTable("Prescribtion");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Qualify", b =>
                {
                    b.Property<int>("QualifyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("q_name");

                    b.HasKey("QualifyId");

                    b.ToTable("Qualify");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.R_analysis", b =>
                {
                    b.Property<int>("R_analysisId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnalysisId");

                    b.Property<int>("PatientId");

                    b.Property<int>("PhysicianId");

                    b.Property<bool>("State1");

                    b.Property<int>("interviewId");

                    b.Property<string>("r_date");

                    b.Property<string>("r_describe");

                    b.Property<string>("r_result");

                    b.Property<bool>("trboll");

                    b.HasKey("R_analysisId");

                    b.HasIndex("AnalysisId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("interviewId");

                    b.ToTable("R_analysis");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("cityId");

                    b.Property<string>("reg_name")
                        .IsRequired();

                    b.HasKey("RegionId");

                    b.HasIndex("cityId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("ERP_HOSPT.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<byte[]>("Image");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Diagnosis", b =>
                {
                    b.HasOne("ERP_HOSPT.Data.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Data.Physician", "physician")
                        .WithMany()
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Data.interview", "interviews")
                        .WithMany()
                        .HasForeignKey("interviewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ERP_HOSPT.Data.interview", b =>
                {
                    b.HasOne("ERP_HOSPT.Data.Company", "Company")
                        .WithMany("interview")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ERP_HOSPT.Data.Patient", "patient")
                        .WithMany("interviews")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Data.Physician", "physician")
                        .WithMany("interviews")
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Models.ApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Patient", b =>
                {
                    b.HasOne("ERP_HOSPT.Data.Company", "Company")
                        .WithMany("Patient")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ERP_HOSPT.Data.Region", "Region")
                        .WithMany("Patients")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Data.City", "city")
                        .WithMany("Patients")
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Physician", b =>
                {
                    b.HasOne("ERP_HOSPT.Data.Company", "Company")
                        .WithMany("Physician")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ERP_HOSPT.Data.Depart", "Depart")
                        .WithMany("Physicians")
                        .HasForeignKey("Departno")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Data.Qualify", "Qualify")
                        .WithMany("Physicians")
                        .HasForeignKey("QualifyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Data.Region", "Region")
                        .WithMany("Physicians")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Data.City", "city")
                        .WithMany("Physicians")
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Models.ApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Prescribtion", b =>
                {
                    b.HasOne("ERP_HOSPT.Data.Drug", "drug")
                        .WithMany("Prescribtions")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Data.Patient", "patient")
                        .WithMany("Prescribtions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Data.Physician", "physician")
                        .WithMany("Prescribtions")
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ERP_HOSPT.Data.R_analysis", b =>
                {
                    b.HasOne("ERP_HOSPT.Data.Analysis", "analysis")
                        .WithMany("R_analysiss")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Data.Patient", "patient")
                        .WithMany("R_analysiss")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Data.Physician", "physician")
                        .WithMany("R_analysiss")
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Data.interview", "interviews")
                        .WithMany()
                        .HasForeignKey("interviewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ERP_HOSPT.Data.Region", b =>
                {
                    b.HasOne("ERP_HOSPT.Data.City", "city")
                        .WithMany("Regions")
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ERP_HOSPT.Models.ApplicationUser", b =>
                {
                    b.HasOne("ERP_HOSPT.Data.Company", "Company")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ERP_HOSPT.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ERP_HOSPT.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERP_HOSPT.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ERP_HOSPT.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
